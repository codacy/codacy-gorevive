[
  {
    "patternId": "add-constant",
    "title": "add-constant",
    "description": "Suggests using constant for magic numbers and string literals.",
    "parameters": [
      {
        "name": "allowFloats",
        "description": "(string) comma-separated list of allowed floats"
      },
      {
        "name": "allowInts",
        "description": "(string) comma-separated list of allowed integers"
      },
      {
        "name": "allowStrs",
        "description": "(string) comma-separated list of allowed string literals"
      },
      {
        "name": "maxLitCount",
        "description": "(string) maximum number of instances of a string literal that are tolerated before warn"
      },
      {
        "name": "ignoreFuncs",
        "description": "(string) comma-separated list of function names regexp patterns to exclude"
      }
    ]
  },
  {
    "patternId": "argument-limit",
    "title": "argument-limit",
    "description": "Warns when a function receives more parameters than the maximum set by the rule's configuration.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(int) the maximum number of parameters allowed per function"
      }
    ]
  },
  {
    "patternId": "atomic",
    "title": "atomic",
    "description": "Check for commonly mistaken usages of the sync/atomic package"
  },
  {
    "patternId": "bare-return",
    "title": "bare-return",
    "description": "Warns on bare (a.k.a. naked) returns"
  },
  {
    "patternId": "banned-characters",
    "title": "banned-characters",
    "description": "Checks given banned characters in identifiers(func, var, const). Comments are not checked.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(list of string) comma-separated list of characters to ban"
      }
    ]
  },
  {
    "patternId": "blank-imports",
    "title": "blank-imports",
    "description": "Blank import should be only in a main or test package, or have a comment justifying it."
  },
  {
    "patternId": "bool-literal-in-expr",
    "title": "bool-literal-in-expr",
    "description": "Using Boolean literals (true, false) in logic expressions may make the code less readable. This rule suggests removing Boolean literals from logic expressions."
  },
  {
    "patternId": "call-to-gc",
    "title": "call-to-gc",
    "description": " Explicitly invoking the garbage collector is, except for specific uses in benchmarking, very dubious."
  },
  {
    "patternId": "confusing-naming",
    "title": "confusing-naming",
    "description": "Methods or fields of struct that have names different only by capitalization could be confusing."
  },
  {
    "patternId": "comment-spacings",
    "title": "comment-spacings",
    "description": "Spots comments of the form:",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(list of string) comma-separated list of exceptions"
      }
    ]
  },
  {
    "patternId": "confusing-results",
    "title": "confusing-results",
    "description": "Function or methods that return multiple, no named, values of the same type could induce error."
  },
  {
    "patternId": "cognitive-complexity",
    "title": "cognitive-complexity",
    "description": "Cognitive complexity is a measure of how hard code is to understand.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(int) the maximum function complexity"
      }
    ]
  },
  {
    "patternId": "constant-logical-expr",
    "title": "constant-logical-expr",
    "description": "The rule spots logical expressions that evaluate always to the same value."
  },
  {
    "patternId": "context-as-argument",
    "title": "context-as-argument",
    "description": "By convention, context.Context should be the first parameter of a function. This rule spots function declarations that do not follow the convention.",
    "parameters": [
      {
        "name": "allowTypesBefore",
        "description": "(list of string) comma-separated list of exceptions"
      }
    ]
  },
  {
    "patternId": "context-keys-type",
    "title": "context-keys-type",
    "description": "Basic types should not be used as a key in context.WithValue."
  },
  {
    "patternId": "cyclomatic",
    "title": "cyclomatic",
    "description": "Cyclomatic complexity is a measure of code complexity. Enforcing a maximum complexity per function helps to keep code readable and maintainable.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(int) the maximum function complexity"
      }
    ]
  },
  {
    "patternId": "datarace",
    "title": "datarace",
    "description": "This rule spots potential dataraces caused by go-routines capturing (by-reference) particular identifiers of the function from which go-routines are created. The rule is able to spot two of such cases: go-routines capturing named return values, and capturing for-range values."
  },
  {
    "patternId": "deep-exit",
    "title": "deep-exit",
    "description": "Packages exposing functions that can stop program execution by exiting are hard to reuse. This rule looks for program exits in functions other than main() or init()."
  },
  {
    "patternId": "defer",
    "title": "defer",
    "description": "This rule warns on some common mistakes when using defer statement. It currently alerts on the following situations:"
  },
  {
    "patternId": "dot-imports",
    "title": "dot-imports",
    "description": "Importing with . makes the programs much harder to understand because it is unclear whether names belong to the current package or to an imported package."
  },
  {
    "patternId": "duplicated-imports",
    "title": "duplicated-imports",
    "description": "It is possible to unintentionally import the same package twice. This rule looks for packages that are imported two or more times."
  },
  {
    "patternId": "early-return",
    "title": "early-return",
    "description": "In Go it is idiomatic to minimize nesting statements, a typical example is to avoid if-then-else constructions. This rule spots constructions like"
  },
  {
    "patternId": "empty-block",
    "title": "empty-block",
    "description": "Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring."
  },
  {
    "patternId": "empty-lines",
    "title": "empty-lines",
    "description": "Sometimes gofmt is not enough to enforce a common formatting of a code-base; this rule warns when there are heading or trailing newlines in code blocks."
  },
  {
    "patternId": "error-naming",
    "title": "error-naming",
    "description": "By convention, for the sake of readability, variables of type error must be named with the prefix err."
  },
  {
    "patternId": "error-return",
    "title": "error-return",
    "description": "By convention, for the sake of readability, the errors should be last in the list of returned values by a function."
  },
  {
    "patternId": "error-strings",
    "title": "error-strings",
    "description": "By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline."
  },
  {
    "patternId": "errorf",
    "title": "errorf",
    "description": "It is possible to get a simpler program by replacing errors.New(fmt.Sprintf()) with fmt.Errorf(). This rule spots that kind of simplification opportunities."
  },
  {
    "patternId": "exported",
    "title": "exported",
    "description": "Exported function and methods should have comments. This warns on undocumented exported functions and methods."
  },
  {
    "patternId": "file-header",
    "title": "file-header",
    "description": "This rule helps to enforce a common header for all source files in a project by spotting those files that do not have the specified header.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(string) the header to look for in source files"
      }
    ]
  },
  {
    "patternId": "flag-parameter",
    "title": "flag-parameter",
    "description": "If a function controls the flow of another by passing it information on what to do, both functions are said to be control-coupled."
  },
  {
    "patternId": "function-result-limit",
    "title": "function-result-limit",
    "description": "Functions returning too many results can be hard to understand/use.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(int) the maximum allowed return values"
      }
    ]
  },
  {
    "patternId": "function-length",
    "title": "function-length",
    "description": "Functions too long (with many statements and/or lines) can be hard to understand."
  },
  {
    "patternId": "get-return",
    "title": "get-return",
    "description": "Typically, functions with names prefixed with Get are supposed to return a value."
  },
  {
    "patternId": "identical-branches",
    "title": "identical-branches",
    "description": "an if-then-else conditional with identical implementations in both branches is an error."
  },
  {
    "patternId": "if-return",
    "title": "if-return",
    "description": "Checking if an error is nil to just after return the error or nil is redundant."
  },
  {
    "patternId": "increment-decrement",
    "title": "increment-decrement",
    "description": "By convention, for better readability, incrementing an integer variable by 1 is recommended to be done using the ++ operator."
  },
  {
    "patternId": "indent-error-flow",
    "title": "indent-error-flow",
    "description": "To improve the readability of code, it is recommended to reduce the indentation as much as possible."
  },
  {
    "patternId": "imports-blacklist",
    "title": "imports-blacklist",
    "description": "Warns when importing black-listed packages.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(list of string) black-list of package names (can be represented using regexp)"
      }
    ]
  },
  {
    "patternId": "import-shadowing",
    "title": "import-shadowing",
    "description": "In GO it is possible to declare identifiers (packages, structs,"
  },
  {
    "patternId": "import-alias-naming",
    "title": "import-alias-naming",
    "description": "Aligns with Go's naming conventions, as outlined in the official"
  },
  {
    "patternId": "line-length-limit",
    "title": "line-length-limit",
    "description": "Warns in the presence of code lines longer than a configured maximum.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(int) maximum line length in characters"
      }
    ]
  },
  {
    "patternId": "max-public-structs",
    "title": "max-public-structs",
    "description": "Packages declaring too many public structs can be hard to understand/use,",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(int) the maximum allowed public structs"
      }
    ]
  },
  {
    "patternId": "modifies-parameter",
    "title": "modifies-parameter",
    "description": "A function that modifies its parameters can be hard to understand. It can also be misleading if the arguments are passed by value by the caller."
  },
  {
    "patternId": "modifies-value-receiver",
    "title": "modifies-value-receiver",
    "description": "A method that modifies its receiver value can have undesired behavior. The modification can be also the root of a bug because the actual value receiver could be a copy of that used at the calling site."
  },
  {
    "patternId": "nested-structs",
    "title": "nested-structs",
    "description": "Packages declaring structs that contain other inline struct definitions can be hard to understand/read for other developers."
  },
  {
    "patternId": "optimize-operands-order",
    "title": "optimize-operands-order",
    "description": "conditional expressions can be written to take advantage of short circuit evaluation and speed up its average evaluation time by forcing the evaluation of less time-consuming terms before more costly ones. This rule spots logical expressions where the order of evaluation of terms seems non optimal. Please notice that confidence of this rule is low and is up to the user to decide if the suggested rewrite of the expression keeps the semantics of the original one."
  },
  {
    "patternId": "package-comments",
    "title": "package-comments",
    "description": "Packages should have comments. This rule warns on undocumented packages and when packages comments are detached to the package keyword."
  },
  {
    "patternId": "range",
    "title": "range",
    "description": "This rule suggests a shorter way of writing ranges that do not use the second value."
  },
  {
    "patternId": "range-val-in-closure",
    "title": "range-val-in-closure",
    "description": "Range variables in a loop are reused at each iteration; therefore a goroutine created in a loop will point to the range variable with from the upper scope. This way, the goroutine could use the variable with an undesired value."
  },
  {
    "patternId": "range-val-address",
    "title": "range-val-address",
    "description": "Range variables in a loop are reused at each iteration. This rule warns when assigning the address of the variable, passing the address to append() or using it in a map."
  },
  {
    "patternId": "receiver-naming",
    "title": "receiver-naming",
    "description": "By convention, receiver names in a method should reflect their identity. For example, if the receiver is of type Parts, p is an adequate name for it. Contrary to other languages, it is not idiomatic to name receivers as this or self."
  },
  {
    "patternId": "redefines-builtin-id",
    "title": "redefines-builtin-id",
    "description": "Constant names like false, true, nil, function names like append, make, and basic type names like bool, and byte are not reserved words of the language; therefore the can be redefined."
  },
  {
    "patternId": "string-of-int",
    "title": "string-of-int",
    "description": " explicit type conversion string(i) where i has an integer type other than rune might behave not as expected by the developer (e.g. string(42) is not \"42\"). This rule spot that kind of suspicious conversions."
  },
  {
    "patternId": "struct-tag",
    "title": "struct-tag",
    "description": "Struct tags are not checked at compile time."
  },
  {
    "patternId": "string-format",
    "title": "string-format",
    "description": "This rule allows you to configure a list of regular expressions that string literals in certain function calls are checked against."
  },
  {
    "patternId": "superfluous-else",
    "title": "superfluous-else",
    "description": "To improve the readability of code, it is recommended to reduce the indentation as much as possible.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(list of string) the flags (\"preserveScope\")"
      }
    ]
  },
  {
    "patternId": "time-equal",
    "title": "time-equal",
    "description": "This rule warns when using == and != for equality check time.Time and suggest to time.time.Equal method, for about information follow this link"
  },
  {
    "patternId": "unchecked-type-assertion",
    "title": "unchecked-type-assertion",
    "description": "This rule checks whether a type assertion result is checked (the ok value), preventing unexpected panics."
  },
  {
    "patternId": "time-naming",
    "title": "time-naming",
    "description": "Using unit-specific suffix like \"Secs\", \"Mins\", ... when naming variables of type time.Duration can be misleading, this rule highlights those cases."
  },
  {
    "patternId": "var-naming",
    "title": "var-naming",
    "description": "This rule warns when initialism, variable or package naming conventions are not followed."
  },
  {
    "patternId": "var-declaration",
    "title": "var-declaration",
    "description": "This rule proposes simplifications of variable declarations."
  },
  {
    "patternId": "unconditional-recursion",
    "title": "unconditional-recursion",
    "description": "Unconditional recursive calls will produce infinite recursion, thus program stack overflow. This rule detects and warns about unconditional (direct) recursive calls."
  },
  {
    "patternId": "unexported-naming",
    "title": "unexported-naming",
    "description": "this rule warns on wrongly named un-exported symbols, i.e. un-exported symbols whose name start with a capital letter."
  },
  {
    "patternId": "unexported-return",
    "title": "unexported-return",
    "description": "This rule warns when an exported function or method returns a value of an un-exported type."
  },
  {
    "patternId": "unhandled-error",
    "title": "unhandled-error",
    "description": "This rule warns when errors returned by a function are not explicitly handled on the caller side.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "(list of string) function names regexp patterns to ignore"
      }
    ]
  },
  {
    "patternId": "unnecessary-stmt",
    "title": "unnecessary-stmt",
    "description": "This rule suggests to remove redundant statements like a break at the end of a case block, for improving the code's readability."
  },
  {
    "patternId": "unreachable-code",
    "title": "unreachable-code",
    "description": "This rule spots and proposes to remove unreachable code."
  },
  {
    "patternId": "unused-parameter",
    "title": "unused-parameter",
    "description": "This rule warns on unused parameters. Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug."
  },
  {
    "patternId": "unused-receiver",
    "title": "unused-receiver",
    "description": "This rule warns on unused method receivers. Methods with unused receivers can be a symptom of an unfinished refactoring or a bug."
  },
  {
    "patternId": "use-any",
    "title": "use-any",
    "description": "Since GO 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any."
  },
  {
    "patternId": "useless-break",
    "title": "useless-break",
    "description": "This rule warns on useless break statements in case clauses of switch and select statements. GO, unlike other programming languages like C, only executes statements of the selected case while ignoring the subsequent case clauses."
  },
  {
    "patternId": "waitgroup-by-value",
    "title": "waitgroup-by-value",
    "description": "Function parameters that are passed by value, are in fact a copy of the original argument. Passing a copy of a sync.WaitGroup is usually not what the developer wants to do."
  },
  {
    "patternId": "redundant-import-alias",
    "title": "redundant-import-alias"
  }
]